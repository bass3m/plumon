(require '[riemann.slack :as slack])

(logging/init {:file "riemann.log"})

; Listen on the local interface over TCP (5555), UDP (5555), and websockets
; (5556)
(let [host "0.0.0.0"]
  (tcp-server {:host host})
  (udp-server {:host host})
  (ws-server  {:host host}))

(def graph (graphite {:host "192.168.99.100" :port 2003}))
; Expire old events from the index every 5 seconds.
(periodically-expire 5)

(defn slack-formatter [events]
  (if (sequential? events)
    {:attachments [{:fields [{:title "riemann events" :short true :value (str (count events))}
                             {:title "riemann hosts" :short true :value (str (count (group-by :host events)))}]}]}
    (slack/default-formatter events)))

(def webhook-uri "https://hooks.slack.com/services/YOURSLACKWEBHOOKURI")

(def slacker (slack {:webhook_uri webhook-uri} {:username "monitorbot"
                                                :channel "#monitoring"
                                                :icon ":alarm_clock:"
                                                :formatter slack-formatter}))

(defn severity
  [state ev]
  (assoc ev :state state))

(def critical (partial severity "critical"))
(def warning (partial severity "warning"))

(let [index (index)]
  ; Inbound events will be passed to these streams:
  (streams
    (default :ttl 60
      ; Index all events immediately.
      index
      (where (service "internet latency")
         (fn [event]
           (when (:metric event)
             (condp < (:metric event)
               50.0 (with :state "critical" (slacker (critical event)) index)
               20.0 (with :state "warning" index)
               (with :state "ok" index)))))
      ; Log expired events.
      (expired
       (fn [event] (info "expired" event)))))
  (streams
    graph)
  (streams
    (default :ttl 720
      (where (service "internet latency")
        (percentiles 360 [0.5 0.95 0.99] index prn #(slacker %))))))
